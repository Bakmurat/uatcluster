apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: argo-cd
  namespace: argo-cd
spec:
  chart:
    spec:
      chart: argo-cd
      version: 8.1.2
      sourceRef:
        kind: HelmRepository
        name: argo-repo
        namespace: flux-system
  interval: 10m
  install:
    createNamespace: true
  targetNamespace: argo-cd
  values:
    # Global configuration
    global:
      domain: argocd.uat.devkuban.com
      image:
        repository: quay.io/argoproj/argocd
        tag: "v2.12.6"
        imagePullPolicy: IfNotPresent
      securityContext:
        runAsNonRoot: true
        runAsUser: 999
        fsGroup: 999
      networkPolicy:
        create: false
        defaultDenyIngress: false

    # High Availability Configuration
    redis-ha:
      enabled: true
      haproxy:
        enabled: true
        replicas: 3
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 200m
            memory: 256Mi
      redis:
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 200m
            memory: 256Mi
      persistentVolume:
        enabled: true
        size: 8Gi
        storageClass: ""

    # Controller (Application Controller) - HA Configuration
    controller:
      replicas: 3
      resources:
        requests:
          cpu: 250m
          memory: 512Mi
        limits:
          cpu: 500m
          memory: 1Gi
      metrics:
        enabled: true
        serviceMonitor:
          enabled: true
      env:
        - name: ARGOCD_CONTROLLER_REPLICAS
          value: "3"
        - name: ARGOCD_CONTROLLER_HEARTBEAT_TIME
          value: "5s"
        - name: ARGOCD_CONTROLLER_OPERATION_PROCESSORS
          value: "10"
        - name: ARGOCD_CONTROLLER_APP_HARD_RESYNC
          value: "0"

    # Server Configuration - HA
    server:
      replicas: 3
      autoscaling:
        enabled: true
        minReplicas: 3
        maxReplicas: 10
        targetCPUUtilizationPercentage: 70
        targetMemoryUtilizationPercentage: 80
      resources:
        requests:
          cpu: 100m
          memory: 128Mi
        limits:
          cpu: 500m
          memory: 512Mi
      metrics:
        enabled: true
        serviceMonitor:
          enabled: true
      config:
        url: "https://argocd.uat.devkuban.com"
        application.instanceLabelKey: argocd.argoproj.io/instance
        server.rbac.log.enforce.enable: "true"
        exec.enabled: "false"
        admin.enabled: "true"
        timeout.reconciliation: 180s
        timeout.hard.reconciliation: 0s
        # Multi-tenant configuration
        application.namespaces: "*"
        controller.sharding.algorithm: "round-robin"
      rbacConfig:
        policy.default: role:readonly
        policy.csv: |
          p, role:admin, applications, *, */*, allow
          p, role:admin, clusters, *, *, allow
          p, role:admin, repositories, *, *, allow
          p, role:admin, accounts, *, *, allow
          p, role:admin, certificates, *, *, allow
          p, role:admin, gpgkeys, *, *, allow
          p, role:admin, logs, *, *, allow
          p, role:admin, exec, *, *, allow
          p, role:admin, extensions, *, *, allow
          
          p, role:developer, applications, *, default/*, allow
          p, role:developer, applications, *, development/*, allow
          p, role:developer, logs, *, default/*, allow
          p, role:developer, logs, *, development/*, allow
          p, role:developer, exec, *, default/*, deny
          p, role:developer, exec, *, development/*, deny
          
          p, role:readonly, applications, get, */*, allow
          p, role:readonly, clusters, get, *, allow
          p, role:readonly, repositories, get, *, allow
          p, role:readonly, logs, get, */*, allow
          
          g, argocd-admins, role:admin
          g, argocd-developers, role:developer
          g, argocd-readonly, role:readonly
      # Ingress Configuration
      ingress:
        enabled: true
        ingressClassName: "nginx"
        annotations:
          kubernetes.io/ingress.class: nginx
          nginx.ingress.kubernetes.io/ssl-redirect: "true"
          nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
        tls: true
        extraTls:
          - secretName: wildcard-uat-devkuban-com-tls
            hosts:
              - argocd.uat.devkuban.com
      # gRPC Ingress
      ingressGrpc:
        enabled: true
        ingressClassName: "nginx"
        annotations:
          kubernetes.io/ingress.class: nginx
          nginx.ingress.kubernetes.io/ssl-redirect: "true"
          nginx.ingress.kubernetes.io/backend-protocol: "GRPC"
          nginx.ingress.kubernetes.io/grpc-backend: "true"
        tls: true
        extraTls:
          - secretName: wildcard-uat-devkuban-com-tls
            hosts:
              - grpc.argocd.uat.devkuban.com

    # Repository Server - HA
    repoServer:
      replicas: 3
      autoscaling:
        enabled: true
        minReplicas: 3
        maxReplicas: 10
        targetCPUUtilizationPercentage: 70
        targetMemoryUtilizationPercentage: 80
      resources:
        requests:
          cpu: 100m
          memory: 256Mi
        limits:
          cpu: 500m
          memory: 512Mi
      metrics:
        enabled: true
        serviceMonitor:
          enabled: true
      env:
        - name: ARGOCD_REPO_SERVER_PARALLELISM_LIMIT
          value: "10"

    # Application Set Controller - HA
    applicationSet:
      enabled: true
      replicas: 3
      resources:
        requests:
          cpu: 100m
          memory: 128Mi
        limits:
          cpu: 500m
          memory: 512Mi
      metrics:
        enabled: true
        serviceMonitor:
          enabled: true

    # Notifications Controller
    notifications:
      enabled: true
      resources:
        requests:
          cpu: 100m
          memory: 128Mi
        limits:
          cpu: 500m
          memory: 512Mi
      metrics:
        enabled: true
        serviceMonitor:
          enabled: true

    # Dex (OIDC) - Disabled for now, can be enabled for SSO
    dex:
      enabled: false

    # ConfigMap for additional configuration
    configs:
      params:
        server.insecure: true
      cm:
        create: true
        data:
          # Multi-tenant settings
          application.namespaces: "*"
          server.rbac.log.enforce.enable: "true"
          policy.default: role:readonly
          url: "https://argocd.uat.devkuban.com"
          # Repository settings
          repositories: |
            - type: git
              url: https://github.com/argoproj/argocd-example-apps
            - type: helm
              url: https://argoproj.github.io/argo-helm
              name: argo
          # Resource customizations for better multi-tenancy
          resource.customizations.health.argoproj.io_Application: |
            hs = {}
            hs.status = "Healthy"
            hs.message = ""
            if obj.status ~= nil then
              if obj.status.health ~= nil then
                hs.status = obj.status.health.status
                if obj.status.health.message ~= nil then
                  hs.message = obj.status.health.message
                end
              end
            end
            return hs

      # Secret for storing sensitive configuration
      secret:
        create: true
        annotations: {}
        labels: {}
        data: {}

      # RBAC configuration
      rbac:
        create: true
        policy.default: role:readonly

    # Service Monitor for Prometheus
    serviceMonitor:
      enabled: true
      additionalLabels:
        release: prometheus
    